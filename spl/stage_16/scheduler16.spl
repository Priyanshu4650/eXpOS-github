alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias counter R2;
counter = currentPID + 1;

//print "mod5ID";
//print [SYSTEM_STATUS_TABLE + 1];
//print [process_table_entry + 4];
//print [process_table_entry + 16 + 4];

alias newPID R3;
newPID = counter;
//print "im fine";
//print "statusbefore";
//print [PROCESS_TABLE + (counter*16) + 4];

while (counter < 16) do
	if(([PROCESS_TABLE + (counter*16) + 4] == CREATED) || ([PROCESS_TABLE + (counter*16) + 4] == READY)) then
		newPID = [PROCESS_TABLE + counter*16 + 1];
		//print "pls dont";
		break;
	else
		newPID = 0;
	endif;
	counter = counter + 1;
endwhile;

//if(newPID == 3) then 
	//print "okey";
//endif;
//print "NEWpid";
//print newPID;
//print "STATUS";
//print [PROCESS_TABLE + newPID*16 + 4];

alias new_process_table R4;
new_process_table = PROCESS_TABLE + newPID * 16;

SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
        SP = [new_process_table + 13];
	[new_process_table + 4] = RUNNING;
	[new_process_table + 9] = 0;
        ireturn;
endif;
//print "nearlythere";
[new_process_table + 4] = RUNNING;
multipop(BP);

return;
