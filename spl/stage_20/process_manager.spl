// Mod 1 (Process Manager)

alias FunctionNum R1;
alias currentPID R2;

// Get PCB Entry 
if(FunctionNum == 1) then
	alias count R3;
	count = 0;

	// Traversing through all the processes
	while(count <= 15) do
			
		// If a processs is terminated then returning its allocated entries
		if([PROCESS_TABLE + count*16 + 4] == TERMINATED) then
			[PROCESS_TABLE + count*16 + 1] = count;
			[PROCESS_TABLE + count*16 + 4] = ALLOCATED;
			[PROCESS_TABLE + count*16 + 14] = PAGE_TABLE_BASE + count*20;
			[PROCESS_TABLE + count*16 + 15] = 10;
			R0 = count;
			return;
		endif;
		count = count + 1;
	endwhile;

	// If all processes are occupied then -1 as no page present
	R0 = -1;
	return;
endif;

// Free User Page Area
if(FunctionNum == 2) then
	alias user_area_pagenum R6;
	user_area_pagenum = [PROCESS_TABLE + currentPID*16 + 11];
	multipush(R1,R2);

	// Get Free Page from memory manager
	R1 = 2;
	R2 = user_area_pagenum;
	call MOD_2;
	multipop(R1,R2);
	return;
endif;

// Exit process
if(FunctionNum == 3) then
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	multipush(R1,R2);
	R1 = 4;
	R2 = currentPID;
	call MOD_1;
	multipop(R1,R2);
	multipush(R1,R2);
	R1 = 2;
	R2 = currentPID;
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
	return;
endif;

if(FunctionNum == 4) then
	PTBR = PAGE_TABLE_BASE;
	[PTBR + currentPID*20 + 0] = -1;
	[PTBR + currentPID*20 + 1] = "0000";
	[PTBR + currentPID*20 + 2] = -1;
	[PTBR + currentPID*20 + 3] = "0000";

	alias i R7;
	i = 4;
	while(i < 20) do
		if([PTBR + currentPID*20 + i]!=-1) then
			multipush(R1,R2,R7);
			R1 = 2;
			R2 = [PTBR + currentPID*20 + i];
			call MOD_2;
			multipop(R1,R2,R7);
			[PTBR + currentPID*20 + i] = -1;
			[PTBR + currentPID*20 + i + 1] = "0000";
		endif;
		i = i + 2;
	endwhile;
	//loop for stack and heap and further checking
	i = 2;
	while(i <= 9) do
		if([DISK_MAP_TABLE + currentPID*10 + i] != -1) then
			multipush(R1,R2,R7);
			R1 = 4;
			R2 = [DISK_MAP_TABLE + currentPID*10 + i];
			call MOD_2;
			
			multipop(R1,R2,R7);
		endif;
		
		if(i == 3) then
			i = 8;
		else
			i = i + 1;
		endif;
	endwhile;
	
	//INVALIDATING ALL ENTRIES IN DISK_MAP_TABLE
	i = 0;
	while(i <= 9) do
		[DISK_MAP_TABLE + currentPID*10 + i] = -1;
		i = i + 1;
	endwhile;
	return;
endif;
