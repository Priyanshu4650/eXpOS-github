// Module 1

alias FunctionNum R1;
alias currentPID R2;

// Getting free user page area
if(FunctionNum == 2) then

	// Getting the user page area number for the current process
	alias user_area_pagenum R6;
	user_area_pagenum = [PROCESS_TABLE + currentPID*16 + 11];
	multipush(R1,R2);
	R1 = 2;
	R2 = user_area_pagenum;

	// Calling memory manager for releasing the page
	call MOD_2;

	multipop(R1,R2);
	return;
endif;

// Exiting the process
if(FunctionNum == 3) then
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	multipush(R1,R2);
	R1 = 4;
	R2 = currentPID;

	// Calling process manager to get free user page area with function number 4
	call MOD_1;

	multipop(R1,R2);
	multipush(R1,R2);
	R1 = 2;
	R2 = currentPID;
	
	// Calling process manager to get free page user area with function number 2
	call MOD_1;

	multipop(R1,R2);

	// Setting the state of the process to be TERMINATED as to end the process
	[PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
	return;
endif;

// Getting Free Page Table
if(FunctionNum == 4) then
	
	// Freeing up the Library Page Area
	PTBR = PAGE_TABLE_BASE;

	// Emptying the page table
	alias i R7;
	i = 0;
	while(i < 20) do
		// Condition for page not to be empty
		if([PTBR + currentPID*20 + i] != -1) then
			multipush(R1,R2,R7);
			R1 = 2;
			R2 = [PTBR + currentPID*20 + i];

			// Calling memory manager to release the page
			call MOD_2;
			
			multipop(R1,R2,R7);
			[PTBR + currentPID*20 + i] = -1;
			[PTBR + currentPID*20 + i + 1] = "0000";
		endif;
		i = i + 2;
	endwhile;
	return;
endif;
