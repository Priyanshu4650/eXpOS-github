// Memory Manager

alias FunctionNum R1;

// Get Free Page
if(FunctionNum == 1) then
	if([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 4] != WAIT_MEM) then
		[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	endif;
	while([SYSTEM_STATUS_TABLE + 2] == 0) do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 4] = WAIT_MEM;
		call MOD_5;
	endwhile;
	
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

	alias free_page R7;
	free_page = 0;
	while(free_page < 128) do
		if([MEMORY_FREE_LIST + free_page] == 0) then
			[MEMORY_FREE_LIST + free_page] = 1;
			R0 = free_page;
			return;
		endif;
		free_page = free_page + 1;
	endwhile;
	return;
endif;

// Releasing Page
if(FunctionNum == 2) then
	alias pagenum R2;
	[MEMORY_FREE_LIST + pagenum] = [MEMORY_FREE_LIST + pagenum] - 1;
	if([MEMORY_FREE_LIST + pagenum] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	
	alias i R6;
	i = 0;
	while(i < 16) do
		if([PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + i*16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
	return;
endif;

if(FunctionNum == 4) then
	alias disk_block_num R2;
	[DISK_FREE_LIST + disk_block_num] = [DISK_FREE_LIST + disk_block_num] - 1;
	return;
endif;

if(FunctionNum == 5) then
	alias block_num R2;
	alias counter R3;
	counter = 0;
	
	// CHECKING ENTRY FOR BLOCK NUM IN DISK_MAP_TABLE FOR ALL PROCESS
	alias start R4; 
	while(counter < 16) do 
		start = 2;
		while(start <= 9) do
			if([DISK_MAP_TABLE + counter*10 + start] == block_num) then
				if([PAGE_TABLE_BASE + counter*20 + start*2] != -1) then
					R0 = [PAGE_TABLE_BASE + counter*20 + start*2];
					[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
					return;
				endif;
			endif;
			start = start + 1;
		endwhile;
		counter = counter + 1;
	endwhile;

	//IF CODE PAGE NOT IN MEMORY
	multipush(R1,R2,R3,R4);
	R1 = 1;
	call MOD_2;

	multipop(R1,R2,R3,R4);

	alias block R10;
	block = block_num;
	multipush(R0,R1,R2,R3,R4);
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = R0;
	R4 = block;

	//Calling device manager
	call MOD_4;

	multipop(R0,R1,R2,R3,R4);

	return;
endif;


