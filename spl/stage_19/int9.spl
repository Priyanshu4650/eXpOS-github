// INT9(EXEC)

// Setting UPTR as SP
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;

// Saving SP in userSP
alias userSP R0;
userSP = SP;

// Setting value of kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512 - 1;

// Setting mode for int9
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 9;

// Getting PTBR for current process
PTBR = PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20);
alias file_name R1;
file_name = [[PTBR + 2*((userSP-4)/512)]*512 + ((userSP-4)%512)];

alias count R2;
count = 0;

// Searching for the file in INODE TABLE
while(count < 60) do
	if(([INODE_TABLE + count*16 + 1] == file_name) && ([INODE_TABLE + count*16 + 0] == EXEC)) then
		break;
	endif;
	count = count + 1;
endwhile;

if(count == 60) then
	print "Not Found";
	SP = userSP;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
	
	// Returning -1 as file not present
	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
	ireturn;
endif;

multipush(R0,R1,R2);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;

multipop(R0,R1,R2);

alias user_area_page_num R3;
user_area_page_num = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11];

[MEMORY_FREE_LIST + user_area_page_num] = [MEMORY_FREE_LIST + user_area_page_num] + 1;

[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = user_area_page_num*512 - 1;

alias i R5;
i=0;
alias user_page R6;
user_page = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11];

//per-process resource table initialisation
while(i < 16) do
        [user_page*512 + 512 - 16 + i] = -1;
        [user_page*512 + 512 - 16 + i + 1] = -1;
        i = i + 2;
endwhile;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 4] = RUNNING;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 7] = count;

PTBR = PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20);

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//STACK ALLOCATION AND VALIDATION IN PAGE TABLE
alias cnt R8;
cnt = 0;
while(cnt < 2) do
	multipush(R0,R1,R2,R3,R5,R6,R8);

	R1 = 1;
	call MOD_2;

	[PTBR + 16 + 2*cnt] = R0;
	[PTBR + 16 + 2*cnt + 1] = "0110";

	if(cnt == 0) then
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = R0;
	endif;
	multipop(R0,R1,R2,R3,R5,R6,R8);
	cnt = cnt + 1;
endwhile;

//HEAP INVALIADTION
cnt = 0;
while(cnt < 2) do
	[PTBR + 4 + 2*cnt] = -1;
	[PTBR + 4 + 2*cnt + 1] = "0000";
	cnt = cnt + 1;
endwhile;

cnt = count;

//NEW CODE ALTERCATION

multipush(R0,R1,R2,R3,R5,R6,R8);
R1 = 5; // GET CODE PAGE
R2 = [INODE_TABLE + cnt*16 + 8];
call MOD_2;

[PTBR + 8] = R0;
[PTBR + 9] = "0100";

multipop(R0,R1,R2,R3,R5,R6,R8);

alias num R4;
num = 0;
while(num <= 2) do
	[PTBR + 10 + 2*num] = -1;
	[PTBR + 10 + 2*num + 1] = "0000";
	num = num + 1;
endwhile;


//INITIALIZE DISK MAP TABLE
num = 0;
while(num < 10) do
	if((num >= 4) && (num <= 7)) then
		[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1]*10) + num] = [INODE_TABLE + count*16 + 4 + num];
	else
		[DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1]*10) + num] = -1;
	endif;
	num = num + 1;
endwhile;

[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];	

SP = 8*512;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;

ireturn;
