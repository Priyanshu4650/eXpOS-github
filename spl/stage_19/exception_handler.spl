// Exception handler
// SEtting mode to be -1 for exception handler
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = -1;

alias userSP R8;
userSP = SP;

alias count R9;
count = 0;

// Setting up of the kernel stack
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512 - 1;

backup;

// EIP = Exception IP
multipush(EIP);

// Conditiotn for an error and the program will end
if(EC != 0) then
	print "No Fault";
	if(EC == 1) then
		print "Illegal Instruction";
	endif;
	
	if(EC == 2) then
		print "Illegal Memory Access";
	endif;

	if(EC == 3) then
		print "Arithmetic exception";
	endif;

	if(userSP == PTLR*512 - 1) then
		print "User Stack full";
	endif;
	
	multipush(R8,R9);
	// EXit process from PRocess manager
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1;
	
	multipop(R8,R9);

	// Invoking Scheduler
	call MOD_5;

// in case of a page fault
else
	//print "Fault is there";
	
	// Condition for error to be in Code Pages
	// EPN = Exception page number
	if((EPN >= 4) && (EPN <= 7)) then 
		print "Code page fault";
		print [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1]*10) + EPN];
		multipush(R8,R9);

		// 
		R1 = 5;
		R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE + 1]*10) + EPN]; // JUST CHECK IT INCASE
		
		// Calling memory manager
		call MOD_2;
		[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20) + 2*EPN] = R0;
		[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20) + 2*EPN + 1] = "1100";
		multipop(R8,R9);
	endif;

	// Page fault for Heap pages
	if((EPN >= 2) && (EPN <= 3)) then
		while(count < 2) do
			print "Heap Fault";
			multipush(R8,R9);
			R1 = 1;
			
			// Calling memory manager for GET FREE PAGE
			call MOD_2;
			[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20) + 2*EPN + count] = R0;
			[PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20) + 2*EPN + count + 1] = "1110";
			multipop(R8,R9);
			count = count + 1;
		endwhile;
	endif;
endif;	

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
multipop(EIP);
restore;

SP = userSP;
SP = SP + 1;
[[PTBR + 2*(SP/512)]*512 + (SP%512)] = EIP;
ireturn;
