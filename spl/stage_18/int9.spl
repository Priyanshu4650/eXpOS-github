// INT 9  (EXEC System Call)

// Setting UPTR as SP value
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = SP;

// Saving SP value in userSP
alias userSP R0;
userSP = SP;


SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11]*512 - 1;

// Mode Flag setting for int9
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 9;

PTBR = PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20);
alias file_name R1;
file_name = [[PTBR + 2*((userSP-4)/512)]*512 + ((userSP-4)%512)];

// Searching for the file
alias count R2;
count = 0;
while(count < 60) do
	// Searching for the file with given file name and file type as EXEC
	if(([INODE_TABLE + count*16 + 1] == file_name) && ([INODE_TABLE + count*16 + 0] == EXEC)) then
		break;
	endif;
	count = count + 1;
endwhile;

// Condition for file to not exist in the system.
if(count == 60) then
	print "Not found";

	// Restoring value of user stack
	SP = userSP;
	
	// Setting mode of the process to be 0 for successful execution
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;

`	// Return value as invalid for not found error
	[[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
	ireturn;
endif;

multipush(R0,R1,R2);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];

// Calling proces manager to exit the current process running(EXIT PROCESS)
call MOD_1;
multipop(R0,R1,R2);

// Getting the user page area number for the current process running
// Kernel stack is present in the user page we released so we want to use the same user area page to access the kernel stack.

alias user_area_page_num R3;
user_area_page_num = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11];

// Incrementing the memory free list by 1 for the current process
[MEMORY_FREE_LIST + user_area_page_num] = [MEMORY_FREE_LIST + user_area_page_num] + 1;

// Decrementing the mem free count
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

// Setting up of the kernel stack
SP = user_area_page_num*512 - 1;

// The page we released for the process and exec process have the same user page area so we are setting up the state to be RUNNING
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 4] = RUNNING;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 7] = count;

PTBR = PAGE_TABLE_BASE + ([SYSTEM_STATUS_TABLE + 1]*20);

// All the process use library page so we are not playing with library page
// Library Pages
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

multipush(R0,R1,R2,R3);

//STACK ALLOCATION 

R1 = 1;
// Calling memory manager to get a free page
call MOD_2;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 13] = R0;
multipop(R0,R1,R2,R3);
multipush(R0,R1,R2,R3);
R1 = 1;

// Calling memory manager to get a free page
call MOD_2;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";
multipop(R0,R1,R2,R3);
multipush(R0,R1,R2,R3);

//HEAP ALLOCATIONi
R1 = 1;

// Calling memory manager to get a free page
call MOD_2;
[PTBR + 4] = R0;
[PTBR + 5] = "0110";
multipop(R0,R1,R2,R3);
multipush(R0,R1,R2,R3);
R1=1;

// Calling memory manager to get a free page
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";
multipop(R0,R1,R2,R3);

// CODE PAGES
alias num R4;
num = 0;
alias i R5;
i = 8;

// Loop to check how many pages are not empty
while(i <= 11) do
	if([INODE_TABLE + count*16 + i] != -1) then
		num = num + 1;
	endif;	
	i = i + 1;
endwhile;

i = 8;
while(num > 0) do
	multipush(R0,R1,R2,R3,R4,R5);
	R1 = 1;
	// Calling memory manager to get a free page
	call MOD_2;
	[PTBR + i] = R0;
	[PTBR + i + 1] = "0100";
	multipop(R0,R1,R2,R3,R4,R5);
	num = num - 1;
	i = i + 2;
endwhile;

i = 0;

alias dup R6;
dup = count;

// 
while (i<=([INODE_TABLE + dup*16 + 2]/PAGE_SIZE) && (i<4) )do
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1] ;
	R3 = [PTBR + 8 + 2*i];
	R4 = [INODE_TABLE + dup*16 + 8 + i];
	
	// Calling the device manager and storing the load, page number and the block number onto the DISK_STATUS_TABLE

	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5);
	i = i + 1;
endwhile;

// Getting the user page area number from the process table of the current process running to clear pages
i=0;
alias user_page R6;
user_page = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 11];

// Clearing the user area page
while(i < 16) do
	[user_page*512 + 512 - 16 + i] = -1;
	[user_page*512 + 512 - 16 + i + 1] = -1;
	i = i + 2;
endwhile; 

// Setting the value of user stack as theh first line of the code pages
[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];	

// Placing the SP as the 8th page in the page table
SP = 8*512;

// Setting mode as 0 for successfull exit
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
ireturn;
